package de.bachelor.smartSchedules.server.model.db;

/**
 * Alle SQL-Statements
 * @author timo
 *
 */
public enum DBStatements {
	
	/**
	 * Gibt die PRODUCT_ID aus:
	 * 1) SCENARIO_ID
	 * 2) VARIANT_ID
	 */
	SELECT_PRODUCT_ID_BY_VARIANT_ID("SELECT PRODUCT_ID FROM VARIANT WHERE SCENARIO_ID = ? AND VARIANT_ID = ?"),
	
	/**
	 * Gibt die VARIANT_ID zu einer OPERATION_ID aus:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 */
	SELECT_VARIANT_ID_BY_OPERATION_ID("SELECT VARIANT_ID FROM OPERATION WHERE SCENARIO_ID = ? AND OPERATION_ID = ?"),
	
	/**
	 * Gibt eine PRODUCT_ID zu einer OPERATION_ID aus:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 */
	SELECT_PRODUCT_ID_BY_OPERATION_ID("SELECT PRODUCT_ID FROM VARIANT NATURAL JOIN OPERATION WHERE SCENARIO_ID = ? AND OPERATION_ID = ?"),
	
	/**
	 * Gibt die SCHEDULE_ID aus, die vor der gegebenen ist:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	SELECT_SCHEDULE_ID_BEFORE("SELECT SCHEDULE_ID FROM SCHEDULE WHERE SCENARIO_ID = ? AND SCHEDULE_ID < ? ORDER BY SCHEDULE_ID DESC LIMIT 1"),
	
	/**
	 * Zeigt alle Tabellen der Datenbank an.
	 */
	SHOW_TABLES("SHOW TABLES"),
	
	/**
	 * Löscht die KeyFigures zu einem Schedule:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	REMOVE_KEY_FIGURES_FOR_SCHEDULE("DELETE FROM SCHEDULE_KEY_FIGURES WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Löscht die AlgorithmInformations zu einen Schedule:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	REMOVE_ALGORITHM_INFORMATIONS_FOR_SCHEDULE("DELETE FROM ALGORITHM_INFORMATIONS WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Löscht die Allocation Predecessors zu einer Allocation:
	 * 1) SCENARIO_ID
	 * 2) ALLOCATION_ID
	 * 3) SCHEDULE_ID
	 */
	REMOVE_ALLOCATION_PREDECESSORS("DELETE FROM ALLOCATION_PREDECESSOR WHERE SCENARIO_ID = ? AND ALLOCATION_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Löscht alle Allocations zu einer PlannedVariant:
	 * 1) SCENARIO_ID
	 * 2) PLANNED_VARIANT_ID
	 */
	REMOVE_PLANNED_VARIANT_ALLOCATIONS("DELETE FROM ALLOCATION WHERE SCENARIO_ID = ? AND PLANNED_VARIANT_ID = ?"),
	
	/**
	 * Löscht alle Planned Variants zu einem Schedule:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	REMOVE_PLANNED_VARIANTS("DELETE FROM PLANNED_VARIANT WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Löscht einen Schedule:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	REMOVE_SCHEDULE("DELETE FROM SCHEDULE WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Legt einen neuen Nutzer an.
	 * 1) NICKNAME
	 * 2) PASSWORD
	 * 3) E_MAIL
	 * 4) FORENAME
	 * 5) SURNAME
	 */
	INSERT_NEW_USER("INSERT INTO USER (NICKNAME, PASSWORD, E_MAIL, FORENAME, SURNAME) VALUES (?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt einen User zurück.
	 * 1) USER_ID
	 */
	SELECT_USER_BY_SCENARIO_ID("SELECT NICKNAME, PASSWORD, E_MAIL, FORENAME, SURNAME FROM USER WHERE USER_ID = ?"),
	
	/**
	 * Gibt einen User zurück:
	 * 1) NICKNAME
	 * 2) PASSWORD
	 */
	SELECT_USER_BY_NICKNAME_AND_PASSWORD("SELECT USER_ID, NICKNAME, PASSWORD, E_MAIL, FORENAME, SURNAME FROM USER WHERE NICKNAME LIKE BINARY ? AND PASSWORD = ?"),
	
	/**
	 * Gibt einen User zurück:
	 * 1) USER_ID
	 */
	SELECT_USER_BY_ID("SELECT NICKNAME, E_MAIL, FORENAME, SURNAME FROM USER WHERE USER_ID = ?"),
	
	/**
	 * Gibt einen User zurück.
	 * 1) E_MAIL
	 */
	SELECT_USER_BY_E_MAIL("SELECT USER_ID, NICKNAME, E_MAIL, FORENAME, SURNAME FROM USER WHERE E_MAIL = ?"),
	
	/**
	 * Gibt einen User zurück.
	 * 1) NICKNAME
	 */
	SELECT_USER_BY_NICKNAME("SELECT USER_ID, NICKNAME, E_MAIL, FORENAME, SURNAME FROM USER WHERE NICKNAME = ?"),
	
	/**
	 * Läd SCHEDULE_IDs, ab einem OFFSET und mit einem LIMIT, zu einem Scenario:
	 * 1) SCENARIO_ID
	 * 2) LIMIT
	 * 3) OFFSET
	 */
	SELECT_SCHEDULES("SELECT SCHEDULE_ID FROM SCHEDULE WHERE SCENARIO_ID = ? ORDER BY SCHEDULE_ID DESC LIMIT ? OFFSET ?"),
	
	/**
	 * Läd die Schedule KeyFigures zu einem Schedule:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	SELECT_SCHEDULE_KEY_FIGURES("SELECT * FROM SCHEDULE_KEY_FIGURES WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Fügt eine neue KeyFigure zu einem Schedule ein:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 * 3) KEY_FIGURE_TYPE
	 * 4) VALUE
	 */
	INSERT_NEW_SCHEDULE_KEY_FIGURE("INSERT INTO SCHEDULE_KEY_FIGURES (SCENARIO_ID, SCHEDULE_ID, KEY_FIGURE_TYPE, VALUE) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Löscht die Resource Alternativen einer Operation:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 */
	REMOVE_OPERATION_RESOURCES("DELETE FROM OPERATION_RESOURCE WHERE SCENARIO_ID = ? AND OPERATION_ID = ?"),
	
	/**
	 * Ändert die EarlistDueTime einer SchduleOrder
	 * 1) EARLIST_DUE_TIME
	 * 2) SCENARIO_ID
	 * 3) SCHEDULE_ORDER_ID
	 */
	UPDATE_ORDERS_DUE_TIME("UPDATE SCHEDULE_ORDER SET EARLIST_DUE_TIME = ? WHERE SCENARIO_ID = ? AND SCHEDULE_ORDER_ID = ?"),
	
	/**
	 * Ändert die Priority einer ScheduleOrder
	 * 1) PRIORITY
	 * 2) SCENARIO_ID
	 * 3) SCHEDULE_ORDER_ID
	 */
	UPDATE_ORDERS_PRIORITY("UPDATE SCHEDULE_ORDER SET PRIORITY = ? WHERE SCENARIO_ID = ? AND SCHEDULE_ORDER_ID = ?"),
	
	/**
	 * Ändert das BreakDown Flag einer Resource
	 * 1) BREAKDOWN
	 * 2) SCENARIO_ID
	 * 3) RESOURCE_ID
	 */
	UPDATE_RESOURCE_BREAKDOWN("UPDATE RESOURCE SET BREAKDOWN = ? WHERE SCENARIO_ID = ? AND RESOURCE_ID = ?"),
	
	/**
	 * Änder die secondsBetweenAllocations
	 * 1) neuer wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_SECONDS_BETWEEN_ALLOCATIONS("UPDATE SCENARIO SET SECONDS_BETWEEN_ALLOCATIONS = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * Ändert die Availability von einer Resource:
	 * 1) AVAILABILITY
	 * 2) SCENARIO_ID
	 * 3) RESOURCE_ID
	 */
	UPDATE_RESOURCE_AVAILABILITY("UPDATE RESOURCE SET AVAILABILITY = ? WHERE SCENARIO_ID = ? AND RESOURCE_ID = ?"),
	
	/**
	 * Ändert die Anzahl der Products in der Order Products List
	 * 1) AMOUNT
	 * 2) SCENARIO_ID
	 * 3) PRODUCT_ID
	 * 4) SCHEDULE_ORDER_ID
	 */
	UPDATE_ORDER_PRODUCTS_LIST("UPDATE ORDER_PRODUCT_LIST SET AMOUNT = ? WHERE SCENARIO_ID = ? AND PRODUCT_ID = ? AND SCHEDULE_ORDER_ID = ?"),
	
	/**
	 * Läd ein Orders ProductsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_REMOVE_ORDERS_PRODUCTS_EVENT("SELECT * FROM REMOVE_ORDERS_PRODUCTS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues RemoveOrdersProducts Event ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) PRODUCT_ID
	 * 4) SCHEDULE_ORDER_ID
	 * 5) AMOUNT
	 * 6) THROWTIME
	 */
	INSERT_NEW_REMOVE_ORDERS_PRODUCTS_EVENT("INSERT INTO REMOVE_ORDERS_PRODUCTS_EVENT (SCENARIO_ID, EVENT_ID, PRODUCT_ID, SCHEDULE_ORDER_ID, AMOUNT, THROWTIME) VALUES (?, ?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_REMOVE_ORDERS_PRODUCTS_EVENT_ID("SELECT EVENT_ID FROM REMOVE_ORDERS_PRODUCTS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein RemoveVariantsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_REMOVE_VARIANTS_EVENT("SELECT * FROM REMOVE_VARIANTS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues RemoveVariantsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) VARIANT_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_REMOVE_VARIANTS_EVENT("INSERT INTO REMOVE_VARIANTS_EVENT (SCENARIO_ID, EVENT_ID, VARIANT_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_REMOVE_VARIANTS_EVENT_ID("SELECT EVENT_ID FROM REMOVE_VARIANTS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Setzt eine Variant als gelöscht:
	 * 1) SCENARIO_ID
	 * 2) VARIANT_ID
	 */
	MARK_VARIANT_AS_REMOVED("UPDATE VARIANT SET REMOVED = '1' WHERE SCENARIO_ID = ? AND VARIANT_ID = ?"),
	
	/**
	 * Läd ein RemoveProductsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_REMOVE_PRODUCTS_EVENT("SELECT * FROM REMOVE_PRODUCTS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Remove Products Event ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) PRODUCT_ID
	 * 4)THROWTIME
	 */
	INSERT_NEW_REMOVE_PRODUCTS_EVENT("INSERT INTO REMOVE_PRODUCTS_EVENT (SCENARIO_ID, EVENT_ID, PRODUCT_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_REMOVE_PRODUCTS_EVENT_ID("SELECT EVENT_ID FROM REMOVE_PRODUCTS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Gibt ein ScheduleChangeByUserEvent aus:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_SCHEDULE_CHANGE_BY_USER_EVENT("SELECT * FROM SCHEDULE_CHANGE_BY_USER_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein ScheduleChangeByUserEvent hinzu:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) THROWTIME
	 */
	INSERT_NEW_SCHEDULE_CHANGE_BY_USER_EVENT("INSERT INTO SCHEDULE_CHANGE_BY_USER_EVENT (SCENARIO_ID, EVENT_ID, THROWTIME) VALUES (?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_SCHEDULE_CHANGE_BY_USER_EVENT_ID("SELECT EVENT_ID FROM SCHEDULE_CHANGE_BY_USER_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Setzt ein Product als gelöscht:
	 * 1) SCENARIO_ID
	 * 2) PRODUCT_ID
	 */
	MARK_PRODUCT_AS_REMOVED("UPDATE PRODUCT SET REMOVED = '1' WHERE SCENARIO_ID = ? AND PRODUCT_ID = ?"),
	
	/**
	 * Markiert eine ScheduleOrder als gelöscht:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ORRDER_ID
	 */
	MARK_SCHEDULE_ORDER_AS_REMOVED("UPDATE SCHEDULE_ORDER SET REMOVED = '1' WHERE SCENARIO_ID = ? AND SCHEDULE_ORDER_ID = ?"),
	
	/**
	 * Läd ein RemoveOrdersEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_REMOVE_ORDERS_EVENT("SELECT * FROM REMOVE_ORDERS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues RemoveOrdersEvent hinzu:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) SCHEDULE_ORDER_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_REMOVE_ORDERS_EVENT("INSERT INTO REMOVE_ORDERS_EVENT (SCENARIO_ID, EVENT_ID, SCHEDULE_ORDER_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_REMOVE_ORDERS_EVENT_ID("SELECT EVENT_ID FROM REMOVE_ORDERS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein NewVariantsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_NEW_VARIANTS_EVENT("SELECT * FROM NEW_VARIANTS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues NewVariantsEvent hinzu.
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) VARIANT_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_VARIANT_EVENT("INSERT INTO NEW_VARIANTS_EVENT (SCENARIO_ID, EVENT_ID, VARIANT_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_NEW_VARIANT_EVENT_ID("SELECT EVENT_ID FROM NEW_VARIANTS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein NewResourcesEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_NEW_RESOURCES_EVENT("SELECT * FROM NEW_RESOURCES_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues NewResourcesEvent ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) RESOURCE_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_RESOURCES_EVENT("INSERT INTO NEW_RESOURCES_EVENT (SCENARIO_ID, EVENT_ID, RESOURCE_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_NEW_RESOURCE_ID("SELECT EVENT_ID FROM NEW_RESOURCES_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein NewProductsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_NEW_PRODUCTS_EVENT("SELECT * FROM NEW_PRODUCTS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) PRODUCT_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_PRODUCTS_EVENT("INSERT INTO NEW_PRODUCTS_EVENT (SCENARIO_ID, EVENT_ID, PRODUCT_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte Event ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_NEW_PRODUCTS_EVENT_ID("SELECT EVENT_ID FROM NEW_PRODUCTS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein NewOrdersEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_NEW_ORDERS_EVENT("SELECT * FROM NEW_ORDERS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues NewOrdersEvent ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) SCHEDULE_ORDER_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_ORDERS_EVENT("INSERT INTO NEW_ORDERS_EVENT (SCENARIO_ID, EVENT_ID, SCHEDULE_ORDER_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_NEW_ORDERS_EVENT_ID("SELECT EVENT_ID FROM NEW_ORDERS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein MaintenancePeriodsEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_MAINTENANCE_PERIODS_EVENT("SELECT * FROM MAINTENANCE_PERIODS_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues MaintenancePeriodsEvent ein
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) RESOURCE_ID
	 * 4) START_TIME
	 * 5) DUE_TIME
	 * 6) THROWTIME
	 */
	INSERT_NEW_MAINTENANCE_PERIODS_EVENT("INSERT INTO MAINTENANCE_PERIODS_EVENT (SCENARIO_ID, EVENT_ID, RESOURCE_ID, START_TIME, DUE_TIME, THROWTIME) VALUES (?, ?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_MAINTENANCE_PERIODS_EVENT("SELECT EVENT_ID FROM MAINTENANCE_PERIODS_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein MachineRepairedEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_MACHINE_REPAIRED_EVENT("SELECT * FROM MACHINE_REPAIR_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Machine Repaired Event ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) RESOURCE_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_MACHINE_REPAIRED_EVENT("INSERT INTO MACHINE_REPAIR_EVENT (SCENARIO_ID, EVENT_ID, RESOURCE_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_MACHINE_REPAIRED_EVENT("SELECT EVENT_ID FROM MACHINE_REPAIR_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein MachineBreakDownEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_MACHINE_BREAK_DOWN_EVENT("SELECT * FROM MACHINE_BREAKDOWN_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Machine Break Down Event ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) RESOURCE_ID
	 * 4) THROWTIME
	 */
	INSERT_NEW_MACHINE_BREAK_DOWN_EVENT("INSERT INTO MACHINE_BREAKDOWN_EVENT (SCENARIO_ID, EVENT_ID, RESOURCE_ID, THROWTIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_MACHINE_BREAK_DOWN_EVENT("SELECT EVENT_ID FROM MACHINE_BREAKDOWN_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein ChangeResourceAvailabilityEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_CHANGE_RESOURCE_AVAILABILITY_EVENT("SELECT * FROM CHANGE_RESOURCE_AVAILABILITY_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Change Resource Availability Event ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) RESOURCE_ID
	 * 4) NEW_AVAILABILITY
	 * 5) OLD_AVAILABILITY
	 * 6) THROWTIME
	 */
	INSERT_NEW_CHANGE_RESOURCE_AVAILABILITY_EVENT("INSERT INTO CHANGE_RESOURCE_AVAILABILITY_EVENT (SCENARIO_ID, EVENT_ID, RESOURCE_ID, NEW_AVAILABILITY, OLD_AVAILABILITY, THROWTIME) VALUES (?, ?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_CHANGE_RESOURCE_AVAILABILITY_EVENT("SELECT EVENT_ID FROM CHANGE_RESOURCE_AVAILABILITY_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein ChangeOrdersPriorityEvent:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_CHANGE_ORDERS_PRIORITY_EVENT("SELECT * FROM CHANGE_ORDERS_PRIORITY_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Change Orders Priority Event ein:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) SCHEDULE_ORDER_ID
	 * 4) NEW_PRIORITY
	 * 5) OLD_PRIORITY
	 * 6) THROWTIME
	 */
	INSERT_NEW_CHANGE_ORDERS_PRIORITY_EVENT("INSERT INTO CHANGE_ORDERS_PRIORITY_EVENT (SCENARIO_ID, EVENT_ID, SCHEDULE_ORDER_ID, NEW_PRIORITY, OLD_PRIORITY, THROWTIME) VALUES (?, ?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_CHANGE_ORDERS_PRIORITY_EVENT("SELECT EVENT_ID FROM CHANGE_ORDERS_PRIORITY_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein ChangeOrdersDueTimesEvent
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_CHANGE_ORDERS_DUE_TIMES_EVENT("SELECT * FROM CHANGE_ORDERS_DUE_TIMES_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Change Orders Due Times Event hinzu:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) SCHEDULE_ORDER_ID
	 * 4) NEW_DUE_TIME
	 * 5) OLD_DUE_TIME
	 * 6) THROWTIME
	 */
	INSERT_NEW_CHANGE_ORDERS_DUE_TIMES_EVENT("INSERT INTO CHANGE_ORDERS_DUE_TIMES_EVENT (SCENARIO_ID, EVENT_ID, SCHEDULE_ORDER_ID, NEW_DUE_TIME, OLD_DUE_TIME, THROWTIME) VALUES (?, ?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_CHANGE_ORDERS_DUE_TIMES_EVENT("SELECT EVENT_ID FROM CHANGE_ORDERS_DUE_TIMES_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Läd ein Change Operation Resource Event:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 */
	SELECT_CHANGE_OPERATION_RESOURCE_EVENT("SELECT * FROM CHANGE_OPERATION_RESOURCE_EVENT WHERE SCENARIO_ID = ? AND EVENT_ID = ?"),
	
	/**
	 * Läd die neuen Operationen zu einem Change Operation Resource Event.
	 * 1) EVENT_ID
	 */
	SELECT_CHANGE_OPERATION_RESOURCE_LIST("SELECT * FROM CHANGE_OPERATION_RESOURCE_LIST WHERE EVENT_ID = ?"),
	
	/**
	 * Läd die alten Operationen zu einem Change Operation Resource Event.
	 * 1) EVENT_ID
	 */
	SELECT_CHANGE_OPERATION_OLD_RESOURCE_LIST("SELECT * FROM CHANGE_OPERATION_OLD_RESOURCE_LIST WHERE EVENT_ID = ?"),
	
	/**
	 * Fügt ein neues Change Operation Resource Event hinzu.
	 * 1) SCENARIO_ID
	 * 2) THROWTIME
	 * 3) NEW_DURATION
	 * 4) OLD_DURATION
	 * 5) OPERATION_ID
	 */
	INSERT_CHANGE_OPERATION_RESOURCES_EVENT("INSERT INTO CHANGE_OPERATION_RESOURCE_EVENT (SCENARIO_ID, THROWTIME, NEW_DURATION, OLD_DURATION, OPERATION_ID) VALUES (?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die größte EVENT_ID aus:.
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_CHANGE_OPERATION_RESOURCES_EVENT("SELECT EVENT_ID FROM CHANGE_OPERATION_RESOURCE_EVENT WHERE SCENARIO_ID = ? ORDER BY EVENT_ID DESC LIMIT 1"),
	
	/**
	 * Fügt ein neues Item in die Change Operation Resource List
	 * für das Change Operation Resource Event ein.
	 * 1) EVENT_ID
	 * 2) OPERATION_ID
	 * 3) RESOURCE_ID
	 */
	INSERT_CHANGE_OPERATION_RESOURCE_LIST_ITEM("INSERT INTO CHANGE_OPERATION_RESOURCE_LIST (EVENT_ID, OPERATION_ID, RESOURCE_ID) VALUES (?, ?, ?)"),
	
	/**
	 * Fügt ein neues Item in die Change Operation OLD Resource List
	 * für das Change Operation Resource Event ein.
	 * 1) EVENT_ID
	 * 2) OPERATION_ID
	 * 3) RESOURCE_ID
	 */
	INSERT_CHANGE_OPERATION_OLD_RESOURCE_LIST_ITEM("INSERT INTO CHANGE_OPERATION_OLD_RESOURCE_LIST (EVENT_ID, OPERATION_ID, RESOURCE_ID) VALUES (?, ?, ?)"),
	
	/**
	 * Zählt die CurrentSchedules:
	 * Spaltenname = COUNTER
	 * 1) SCENARIO_ID
	 */
	COUNT_CURRENT_SCHEDULES("SELECT COUNT(*) AS COUNTER FROM CURRENT_SCHEDULE_LIST WHERE SCENARIO_ID = ?"),
	
	/**
	 * Läd alle Einträge aus der Current Schedule List:
	 * 1) SCENARIO_ID
	 */
	SELECT_CURRENT_SCHEDULES("SELECT * FROM CURRENT_SCHEDULE_LIST WHERE SCENARIO_ID = ?"),
	
	/**
	 * Fügt einen neuen Eintrag in die Current Schedule List hinzu:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	INSERT_CURRENT_SCHEDULE_LIST_ITEM("INSERT INTO CURRENT_SCHEDULE_LIST (SCENARIO_ID, SCHEDULE_ID) VALUES (?, ?)"),
	
	/**
	 * Löscht alle Current Schedule List Einträge für ein Scenario:
	 * 1) SCENARIO_ID
	 */
	REMOVE_CURRENT_SCHEDULE_LIST("DELETE FROM CURRENT_SCHEDULE_LIST WHERE SCENARIO_ID = ?"),
	
	/**
	 * Läd alle SCENARIO_IDs.
	 */
	SELECT_SCENARIO_IDS("SELECT SCENARIO_ID FROM SCENARIO"),
	
	/**
	 * Läd alle Scenarios.
	 */
	SELECT_SCENARIOS("SELECT * FROM SCENARIO"),
	
	/**
	 * Fügt ein neues Scenario hinzu:
	 * 1) AUTHER_ID
	 * 2) CHOSEN_SCHEDULE_ID
	 * 3) NAME
	 * 4) NEW PRODUCT_ID_COUNT
	 * 5) NEW_ORDER_ID_COUNT
	 * 6) NEW_VARIANT_ID_COUNT
	 * 7) NEW_OPERATION_ID_COUNT
	 * 8) NEW_RESOURCE_ID_COUNT
	 * 9) SCHEDULE_CHANGE_DEADLINE
	 * 10) SECONDS_BETWEEN_ALLOCATIONS
	 */
	INSERT_NEW_SCENARIO("INSERT INTO SCENARIO (AUTHER_ID, CHOSEN_SCHEDULE_ID, NAME, NEW_PRODUCT_ID_COUNT, NEW_ORDER_ID_COUNT, NEW_VARIANT_ID_COUNT, NEW_OPERATION_ID_COUNT, NEW_RESOURCE_ID_COUNT, SCHEDULE_CHANGE_DEADLINE, SECONDS_BETWEEN_ALLOCATIONS) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"),
			
	/**
	 * 1) CHOSEN_SCHEDULE_ID
	 * 2) SCENARIO_ID
	 */
	UPDATE_SCENARIO_CHOSEN_SCHEDULE("UPDATE SCENARIO SET CHOSEN_SCHEDULE_ID = ? WHERE SCENARIO_ID = ?"),

	/**
	 * 1) Neuer Wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_NEW_PRODUCT_ID("UPDATE SCENARIO SET NEW_PRODUCT_ID_COUNT = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * 1) Neuer Wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_NEW_ORDER_ID_COUNT("UPDATE SCENARIO SET NEW_ORDER_ID_COUNT = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * 1) Neuer Wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_NEW_VARIANT_ID_COUNT("UPDATE SCENARIO SET NEW_VARIANT_ID_COUNT = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * 1) Neuer Wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_NEW_OPERATION_ID_COUNT("UPDATE SCENARIO SET NEW_OPERATION_ID_COUNT = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * 1) Neuer Wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_NEW_RESOURCE_ID_COUNT("UPDATE SCENARIO SET NEW_RESOURCE_ID_COUNT = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * 1) Neuer Wert
	 * 2) SCENARIO_ID
	 */
	UPDATE_SCHEDULE_CHANGE_DEADLINE("UPDATE SCENARIO SET SCHEDULE_CHANGE_DEADLINE = ? WHERE SCENARIO_ID = ?"),
	
	/**
	 * Läd ein Scenaro:
	 * 1) SCENARIO_ID
	 */
	SELECT_SCENARIO("SELECT * FROM SCENARIO WHERE SCENARIO_ID = ?"),
	
	/**
	 * Gibt das neuste Scenario aus:
	 */
	SELECT_LAST_SCENARIO("SELECT * FROM SCENARIO ORDER BY SCENARIO_ID DESC LIMIT 1"),
	
	/**
	 * Fügt einen neuen Eintrag in die key Figure list hinzu:
	 * 1) SCENARIO_ID
	 * 2) KEY_FIGURE_TYPE
	 * 3) PRIORITY
	 */
	INSERT_NEW_KEY_FIGURE_LIST_ITEM("INSERT INTO KEY_FIGURE_LIST (SCENARIO_ID, KEY_FIGURE_TYPE, PRIORITY) VALUES (?, ?, ?)"),
	
	/**
	 * Gibt alle Key Figure List Items aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_KEY_FIGURE_LIST("SELECT * FROM KEY_FIGURE_LIST WHERE SCENARIO_ID = ?"),
	
	/**
	 * Löscht die Key Figure List zu einem Scenario:
	 * 1) SCENARIO_ID
	 */
	REMOVE_KEY_FIGURE_LIST("DELETE FROM KEY_FIGURE_LIST WHERE SCENARIO_ID = ?"),
	
	/**
	 * Fügt neue Algorithm Informations hinzu:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 * 3) INITIAL_SCHEDULE_ID
	 * 4) START_TIME
	 * 5) DUE_TIME
	 * 6) ALGORITHM_NAME
	 */
	INSERT_NEW_ALGORITHM_INFORMATIONS("INSERT INTO ALGORITHM_INFORMATIONS (SCENARIO_ID, SCHEDULE_ID, INITIAL_SCHEDULE_ID, START_TIME, DUE_TIME, ALGORITHM_NAME) VALUES (?, ?, ?, ?, ?, ?)"),
	
	/**
	 * Gibt die Algorithm Informations zu einem Schedule aus:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	SELECT_ALGORITHM_INFORMATIONS("SELECT * FROM ALGORITHM_INFORMATIONS WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Fügt einen neuen Schedule hinzu:
	 * 1) SCENARIO_ID
	 * 2) EVENT_ID
	 * 3) EVENT_TYP
	 */
	INSERT_NEW_SCHEDULE("INSERT INTO SCHEDULE (SCENARIO_ID, EVENT_ID, EVENT_TYP) VALUES (?, ?, ?)"),
	
	/**
	 * Läd alle Schedules die neuer als eine bestimmte ID sind.
	 * Die Reihenfolge ist absteigend.
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	SELECT_SCHEDULES_AFTER_SCHEDULE_ID("SELECT * FROM SCHEDULE WHERE SCENARIO_ID = ? AND SCHEDULE_ID > ? ORDER BY SCHEDULE_ID DESC"),
	
	/**
	 * Läd einen Schedule:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	SELECT_SCHEDULE("SELECT * FROM SCHEDULE WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Gibt den neusten Schedule aus:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_SCHEDULE("SELECT * FROM SCHEDULE WHERE SCENARIO_ID = ? ORDER BY SCHEDULE_ID DESC LIMIT 1"),
	
	/**
	 * Fügt einen neuen Eintrag in die Product List einer Schedule Order hin:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ORDER_ID
	 * 3) PRODUCT_ID
	 * 4) AMOUNT
	 */
	INSERT_NEW_ORDER_PRODUCT_LIST_ITEM("INSERT INTO ORDER_PRODUCT_LIST (SCENARIO_ID, SCHEDULE_ORDER_ID, PRODUCT_ID, AMOUNT) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Gibt alle Product Listen zu einer Schedule Order aus:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ORDER_ID
	 */
	SELECT_ORDER_PRODUCT_LIST("SELECT PRODUCT_ID, AMOUNT FROM ORDER_PRODUCT_LIST WHERE SCENARIO_ID = ? AND SCHEDULE_ORDER_ID = ?"),
	
	/**
	 * Fügt eine Schedule Order hinzu:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ORDER_ID
	 * 3) PRIORITY
	 * 4) EARLIST_DUE_TIME
	 * 5) NAME
	 */
	INSERT_NEW_SCHEDULE_ORDER("INSERT INTO SCHEDULE_ORDER (SCENARIO_ID, SCHEDULE_ORDER_ID, PRIORITY, EARLIST_DUE_TIME, NAME) VALUES (?, ?, ?, ?, ?)"),
	
	/**
	 * Läd alle Schedule Orders:
	 * 1) SCENARIO_ID
	 */
	SELECT_SCHEDULE_ORDERS("SELECT * FROM SCHEDULE_ORDER WHERE SCENARIO_ID = ?"),
	
	/**
	 * Läd eine ScheduleOrder
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ORDER_ID
	 */
	SELECT_SCHEDULE_ORDER("SELECT * FROM SCHEDULE_ORDER WHERE SCENARIO_ID = ? AND SCHEDULE_ORDER_ID = ?"),
	
	/**
	 * Fügt eine neue Resource Restriction hinzu:
	 * 1) SCENARIO_ID
	 * 2) RESOURCE_ID
	 * 3) START_TIME
	 * 4) DUE_TIME
	 */
	INSERT_NEW_RESOURCE_RESTRICTION("INSERT INTO RESOURCE_RESTRICTION (SCENARIO_ID, RESOURCE_ID, START_TIME, DUE_TIME) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Läd alle Resource Restrictions zu einer Resource:
	 * 1) SCENARIO_ID
	 * 2) RESOURCE_ID
	 */
	SELECT_RESOURCE_RESTRICTION("SELECT START_TIME, DUE_TIME FROM RESOURCE_RESTRICTION WHERE SCENARIO_ID = ? AND RESOURCE_ID = ?"),
	
	/**
	 * Läd alle Resource Restrictions zu einer Resource, die nach einem bestimten TimeStamp stattfinden:
	 * 1) SCENARIO_ID
	 * 2) RESOURCE_ID
	 * 3) min. DUE_TIME
	 */
	SELECT_RESOURCE_RESTRICTIONS_AFTER_DATE("SELECT START_TIME, DUE_TIME FROM RESOURCE_RESTRICTION WHERE SCENARIO_ID = ? AND RESOURCE_ID = ? AND" +
			" DUE_TIME >= ?"),
	
	/**
	 * Läd die letzte Resource Restriction:
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_RESOURCE_RESTRICTION("SELECT * FROM RESOURCE_RESTRICTION WHERE SCENARIO ID = ? ORDER BY RESOURCE_RESTRICTION_ID DESC LIMIT 1"),
	
	/**
	 * Fügt eine neue Resource hinzu:
	 * 1) SCENARIO_ID
	 * 2) RESOURCE_ID
	 * 3) NAME
	 * 4) BREAKDOWN
	 * 5) AVAILABILITY
	 */
	INSERT_NEW_RESOURCE("INSERT INTO RESOURCE (SCENARIO_ID, RESOURCE_ID, NAME, BREAKDOWN, AVAILABILITY) VALUES (?, ?, ?, ?, ?)"),
	
	/**
	 * Läd alle Resources:
	 * 1) SCENARIO_ID
	 */
	SELECT_RESOURCES("SELECT * FROM RESOURCE WHERE SCENARIO_ID = ?"),
	
	/**
	 * Fügt eine neue Variant hinzu:
	 * 1) SCENARIO_ID
	 * 2) VARIANT_ID
	 * 3) PRODUCT_ID
	 */
	INSERT_NEW_VARIANT("INSERT INTO VARIANT (SCENARIO_ID, VARIANT_ID, PRODUCT_ID) VALUES (?, ?, ?)"),
	
	/**
	 * Läd alle Varianten zu einem Product:
	 * 1) SCENARIO_ID
	 * 2) PRODUCT_ID
	 */
	SELECT_VARIANTS_BY_PRODUCT_ID("SELECT * FROM VARIANT WHERE SCENARIO_ID = ? AND PRODUCT_ID = ? AND REMOVED = 0 ORDER BY VARIANT_ID ASC"),
	
	/**
	 * Läd eine Variant:
	 * 1) SCENARIO_ID
	 * 2) VARIANT_ID
	 */
	SELECT_VARIANT("SELECT * FROM VARIANT WHERE SCENARIO_ID = ? AND VARIANT_ID = ?"),
	
	/**
	 * Läd alle Varianten zu einem Scenario.
	 * 1) SCENARIO_ID
	 */
	SELECT_VARIANTS("SELECT * FROM VARIANT WHERE SCENARIO_ID = ? ORDER BY VARIANT_ID ASC"),
	
	
	/**
	 * Fügt ein neues Product hinzu:
	 * 1) SCENARIO_ID
	 * 2) PRODUCT_ID
	 * 3) NAME
	 */
	INSERT_NEW_PRODUCT("INSERT INTO PRODUCT (SCENARIO_ID, PRODUCT_ID, NAME) VALUES (?, ?, ?)"),
	
	/**
	 * Gibt das geforderte Product aus:
	 * 1) SCENARIO_ID
	 * 2) PRODUCT_ID
	 */
	SELECT_PRODUCT("SELECT * FROM PRODUCT WHERE SCENARIO_ID = ? AND PRODUCT_ID = ?"),
	
	/**
	 * Läd alle nicht entfernten Products:
	 * 1) SCENARIO_ID
	 */
	SELECT_PRODUCTS("SELECT * FROM PRODUCT WHERE SCENARIO_ID = ? AND REMOVED = 0 ORDER BY PRODUCT_ID ASC"),
	
	/**
	 * Fügt eine neue PlannedVariant hinzu:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 * 3) VARIANT_ID
	 */
	INSERT_NEW_PLANNED_VARIANT("INSERT INTO PLANNED_VARIANT (SCENARIO_ID, SCHEDULE_ID, VARIANT_ID) VALUES (?, ?, ?)"),
	
	/**
	 * Gibt alle Planned Variants zu einem Schedule aus:
	 * 1) SCENARIO_ID
	 * 2) SCHEDULE_ID
	 */
	SELECT_PLANNED_VARIANTS("SELECT * FROM PLANNED_VARIANT WHERE SCENARIO_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Läd die neuste Planned Variant
	 * 1) SCENARIO_ID
	 */
	SELECT_LAST_PLANNED_VARIANT("SELECT * FROM PLANNED_VARIANT WHERE SCENARIO_ID = ? ORDER BY PLANNED_VARIANT_ID DESC LIMIT 1"),
	
	/**
	 * Fügt eine neue Operation hinzu:
	 * 1) OPERATION_ID
	 * 2) SCENARIO_ID
	 * 3) VARIANT_ID
	 * 4) NAME
	 * 5) DURATION
	 */
	INSERT_NEW_OPERATION("INSERT INTO OPERATION (OPERATION_ID, SCENARIO_ID, VARIANT_ID, NAME, DURATION) VALUES (?, ?, ?, ?, ?)"),
	
	/**
	 * Fügt einen neuen Operation Predecessor hinzu:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 * 3) OPERATION_PRE_ID
	 */
	INSERT_OPERATION_PREDECESSOR("INSERT INTO OPERATION_PREDECESSOR (SCENARIO_ID, OPERATION_ID, OPERATION_PRE_ID) VALUES (?, ?, ?)"),
	
	/**
	 * Fügt eine neue Resource zu einer Operation hinzu:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 * 3) RESOURCE_ID
	 */
	INSERT_OPERATION_RESOURCE("INSERT INTO OPERATION_RESOURCE (SCENARIO_ID, OPERATION_ID, RESOURCE_ID) VALUES (?, ?, ?)"),
	
	/**
	 * Gibt eine Operation aus:
	 * 1) SCENARIO_ID
	 * 2) VARIANT_ID
	 */
	SELECT_OPERATION("SELECT * FROM OPERATION WHERE SCENARIO_ID = ? AND VARIANT_ID = ? ORDER BY OPERATION_ID ASC"),
	
	/**
	 * Gibt die IDs aller Predecessors aus:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 */
	SELECT_OPERATION_PREDECESSORS("SELECT OPERATION_PRE_ID FROM OPERATION_PREDECESSOR WHERE SCENARIO_ID = ? AND OPERATION_ID = ?"),
	
	/**
	 * Gibt die IDs aller Resources aus:
	 * 1) SCENARIO_ID
	 * 2) OPERATION_ID
	 */
	SELECT_OPERATION_RESOURCES("SELECT RESOURCE_ID FROM OPERATION_RESOURCE WHERE SCENARIO_ID = ? AND OPERATION_ID = ?"),
	
	/**
	 * Läd eine Allocation:
	 * 1) SCENARIO_ID
	 * 2) PLANNED_VARIANT_ID
	 * 3) SCHEDULE_ID 
	 */
	SELECT_ALLOCATION("SELECT * FROM ALLOCATION WHERE SCENARIO_ID = ? AND PLANNED_VARIANT_ID = ? ORDER BY ALLOCATION_ID ASC"),
	
	/**
	 * Läd alle Allocation Predecessors
	 * 1) SCENARIO_ID
	 * 2) ALLOCATION_ID
	 * 3) SCHEDULE_ID
	 */
	SELECT_ALLOCATION_PREDECESSOR("SELECT * FROM ALLOCATION_PREDECESSOR WHERE SCENARIO_ID = ? AND ALLOCATION_ID = ? AND SCHEDULE_ID = ?"),
	
	/**
	 * Legt einen neuen Allocation Predecessor an:
	 * 1) ALLOCATION_ID
	 * 2) SCENARIO_ID
	 * 3) ALLOCATION_PRE_ID
	 * 4 ) SCHEDULE_ID
	 */
	INSERT_NEW_ALLOCATION_PREDECESSOR("INSERT INTO ALLOCATION_PREDECESSOR (ALLOCATION_ID, SCENARIO_ID, ALLOCATION_PRE_ID, SCHEDULE_ID) VALUES (?, ?, ?, ?)"),
	
	/**
	 * Legt eine neue Allocation an:
	 * 1) SCENARIO_ID
	 * 2) ALLOCATION_ID
	 * 3) OPERATION_ID
	 * 4) START_TIME als long
	 * 5) PLANNED_VARIANT_ID
	 * 6) RESOURCE_ID
	 * 7) SCHEDULE_ORDER_ID
	 * 8) SCHEDULE_ID
	 */
	INSERT_NEW_ALLOCATION("INSERT INTO ALLOCATION (SCENARIO_ID, ALLOCATION_ID, OPERATION_ID, START_TIME, PLANNED_VARIANT_ID, RESOURCE_ID, SCHEDULE_ORDER_ID, SCHEDULE_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
	

	/**
	 * SQL String für das zugehörige Enum.
	 */
	private String stmt;

	/**
	 * Konstruktor
	 * 
	 * @param stmt
	 *            String
	 */
	DBStatements(String stmt) {
		this.stmt = stmt;
	}

	/**
	 * Liefert den SQL String
	 * 
	 * @return stmt
	 */
	public String getStmt() {
		return this.stmt;
	}

	/**
	 * Schreibt den SQL-String
	 * 
	 * @return stmt
	 */
	@Override
	public String toString() {
		return this.stmt;
	}
}
